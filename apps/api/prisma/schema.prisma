datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  name                String?
  pictureUrl          String?
  provider            AuthProvider    @default(EMAIL)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  profiles            Profile[]
  resumes             Resume[]
  refreshTokens       RefreshToken[]
  handshakeCodes      HandshakeCode[]
  oAuthAccounts       OAuthAccount[]
  sessions            Session[]
  onboardingCompleted Boolean         @default(false)
  job                 Job[]
}

enum AuthProvider {
  EMAIL
  GOOGLE
  LINKEDIN
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String
  hashedToken String   @unique
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model HandshakeCode {
  id        String    @id @default(cuid())
  userId    String
  code      String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Profile {
  id         String   @id @default(cuid())
  userId     String
  label      String   @default("Default")
  personal   Json?
  education  Json?
  skills     Json?
  experience Json?
  projects   Json?
  isDefault  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumes    Resume[]

  @@index([userId])
}

model Resume {
  id         String   @id @default(cuid())
  userId     String
  profileId  String?
  storageUrl String
  checksum   String   @unique
  mime       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile    Profile? @relation(fields: [profileId], references: [id])

  @@index([userId])
}

model OAuthAccount {
  id         String   @id @default(cuid())
  userId     String
  provider   String
  providerId String // sub from provider
  email      String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  refreshId  String? // optional link to RefreshToken.id
  userAgent  String?
  ip         String?
  createdAt  DateTime @default(now())
  lastSeenAt DateTime @default(now())
  revoked    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum JobStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  TEMP
  OTHER
}

enum SourceKind {
  WORKDAY
  GREENHOUSE
  LEVER
  LINKEDIN
  INDEED
  COMPANY_SITE
  OTHER
}

model Company {
  id        String   @id @default(cuid())
  userId    String // per-user namespace to avoid global coupling
  name      String
  website   String?
  domain    String? // e.g., example.com
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs Job[]

  @@unique([userId, domain])
  @@unique([userId, name]) // pragmatic guard; can be relaxed if needed
  @@index([userId])
}

model Job {
  id             String          @id @default(cuid())
  userId         String
  companyId      String?
  title          String
  location       String?
  remote         Boolean         @default(false)
  employment     EmploymentType?
  salaryMin      Int?
  salaryMax      Int?
  salaryCurrency String? // "USD"
  salaryPeriod   String? // "YEAR", "HOUR"
  status         JobStatus       @default(SAVED)

  // Source/Import
  sourceKind    SourceKind? // GREENHOUSE, WORKDAY, etc.
  sourceId      String? // external job id if known
  jobUrl        String? // public job posting URL
  canonicalHash String? // sha256(host+path normalized)
  jdText        String? // raw description text (optional for now)

  // Timestamps for audit & analytics
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  savedAt     DateTime  @default(now())
  appliedAt   DateTime?
  interviewAt DateTime?
  offerAt     DateTime?
  rejectedAt  DateTime?
  boardOrder  Int       @default(0)

  tags  Json? // string[]
  notes String?

  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
  @@index([companyId])
  @@index([userId, canonicalHash])
  @@index([userId, sourceKind, sourceId])
  @@index([userId, status, boardOrder])
}
